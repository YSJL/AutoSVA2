// This property file was autogenerated by AutoSVA on 2023-09-09
// to check the behavior of the original RTL module, whose interface is described below: 

module fifo_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2,
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================
localparam INFLIGHT = 2**INFLIGHT_IDX;

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));
wire out_hsk = out_val && out_rdy;
wire in_hsk = in_val && in_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign out_transid = fifo.buffer_tail_r;
assign in_transid = fifo.buffer_head_r;

//====DESIGNER-ADDED-SVA====//




// Property File

// Check: If the input handshake occurs (both in_val and in_rdy are high), in the next cycle, the buffer_head_r should increment.
as__buffer_head_increment : assert property (
    fifo.in_val && fifo.in_rdy |=> fifo.buffer_head_r == $past(fifo.buffer_head_r) + 1
);

// Check: If the output handshake occurs (both out_val and out_rdy are high), in the next cycle, the buffer_tail_r should increment.
as__buffer_tail_increment : assert property (
    fifo.out_val && fifo.out_rdy |=> fifo.buffer_tail_r == $past(fifo.buffer_tail_r) + 1
);

// Check: Data written into the FIFO (when input handshake occurs) should be the same data that is read out from the FIFO (when output handshake occurs).
as__data_integrity : assert property (
    (fifo.in_val && fifo.in_rdy) |=> $rose(fifo.out_val) implies fifo.out_data == $past(fifo.in_data)
);

// Check: If input is ready (in_rdy is high) and input handshake hasn't occurred yet, the buffer_head_r should remain the same in the next cycle.
as__buffer_head_no_increment : assert property (
    fifo.in_rdy && !fifo.in_val |=> fifo.buffer_head_r == $past(fifo.buffer_head_r)
);

// Check: If output is ready (out_rdy is high) and output handshake hasn't occurred yet, the buffer_tail_r should remain the same in the next cycle.
as__buffer_tail_no_increment : assert property (
    fifo.out_rdy && !fifo.out_val |=> fifo.buffer_tail_r == $past(fifo.buffer_tail_r)
);

// Check: If all the buffers are occupied, input will not be ready for new data.
as__input_not_ready : assert property (
    &fifo.buffer_val_r |-> !fifo.in_rdy
);

// Check: If none of the buffers are occupied, there will be no valid data available for output.
as__output_not_valid : assert property (
    !|fifo.buffer_val_r |-> !fifo.out_val
);

// Check: If a buffer is added this cycle, the same buffer should not be cleared in the same cycle.
as__add_buffer_not_cleared : assert property (
    foreach (fifo.add_buffer[i]) (
        fifo.add_buffer[i] |-> !fifo.clr_buffer[i]
    )
);

// Check: If a buffer is occupied, it should remain occupied until cleared.
as__buffer_val_persistence : assert property (
    foreach (fifo.buffer_val_r[i]) (
        (fifo.buffer_val_r[i] && !$rose(fifo.clr_buffer[i])) |-> fifo.buffer_val_r[i]
    )
);







endmodule