// This property file was autogenerated by AutoSVA on 2023-09-09
// to check the behavior of the original RTL module, whose interface is described below: 

module fifo_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2,
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================
localparam INFLIGHT = 2**INFLIGHT_IDX;

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));
wire out_hsk = out_val && out_rdy;
wire in_hsk = in_val && in_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign out_transid = fifo.buffer_tail_flipflop;
assign in_transid = fifo.buffer_head_flipflop;

//====DESIGNER-ADDED-SVA====//





// Property File for the fifo module

// Assertion to check the behavior of buffer_head_flipflop when in_hsk is true
as__buffer_head_update: 
  assert property (fifo.in_hsk |=> fifo.buffer_head_flipflop == $past(fifo.buffer_head_flipflop) + 1'b1);

// Assertion to check the behavior of buffer_tail_flipflop when out_hsk is true
as__buffer_tail_update: 
  assert property (fifo.out_hsk |=> fifo.buffer_tail_flipflop == $past(fifo.buffer_tail_flipflop) + 1'b1);

// Assertion to ensure that when data is written (add_buffer is true), it is stored correctly in the buffer_data_flipflop
genvar i;
generate
  for (i = 0; i < 2**fifo.INFLIGHT_IDX; i = i + 1) begin : buffer_data_gen
    as__buffer_data_update: 
      assert property (fifo.add_buffer[i] |=> fifo.buffer_data_flipflop[i] == $past(fifo.in_data));
  end
endgenerate

// Assertion to ensure the correct behavior of buffer_val_flipflop when add_buffer or clr_buffer is active
generate
  for (i = 0; i < 2**fifo.INFLIGHT_IDX; i = i + 1) begin : buffer_val_gen
    as__buffer_val_set: 
      assert property (fifo.add_buffer[i] |=> fifo.buffer_val_flipflop[i] == 1'b1);
    
    as__buffer_val_clear: 
      assert property (fifo.clr_buffer[i] && !fifo.add_buffer[i] |=> fifo.buffer_val_flipflop[i] == 0);
    
    as__buffer_val_unchanged: 
      assert property (!fifo.add_buffer[i] && !fifo.clr_buffer[i] |=> fifo.buffer_val_flipflop[i] == $past(fifo.buffer_val_flipflop[i]));
  end
endgenerate

// Assertion to ensure that the out_data is always equal to the data stored at buffer_tail_flipflop's position in buffer_data_flipflop
as__out_data_correctness: 
  assert property (fifo.out_val |-> fifo.out_data == fifo.buffer_data_flipflop[fifo.buffer_tail_flipflop]);

// Assertion to ensure that out_val is true if there is any valid data in buffer_val_flipflop
as__out_val_correctness: 
  assert property (|fifo.buffer_val_flipflop |-> fifo.out_val == 1'b1);

// Assertion to ensure that in_rdy is false only if all buffer slots are full
as__in_rdy_correctness: 
  assert property (!&fifo.buffer_val_flipflop |-> fifo.in_rdy == 1'b1);
  
as__in_rdy_full: 
  assert property (&fifo.buffer_val_flipflop |-> fifo.in_rdy == 0);






endmodule