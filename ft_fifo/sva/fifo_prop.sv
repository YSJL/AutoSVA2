// This property file was autogenerated by AutoSVA on 2023-09-09
// to check the behavior of the original RTL module, whose interface is described below: 

module fifo_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2,
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================
localparam INFLIGHT = 2**INFLIGHT_IDX;

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));
wire out_hsk = out_val && out_rdy;
wire in_hsk = in_val && in_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign out_transid = fifo.buffer_tail_r;
assign in_transid = fifo.buffer_head_r;

//====DESIGNER-ADDED-SVA====//

// Ensure valid handshake
property pr__valid_in_handshake;
    @(posedge clk) (fifo.in_val && fifo.in_rdy) |-> fifo.in_val;
endproperty
as__valid_in_handshake : assert property (pr__valid_in_handshake);

property pr__valid_out_handshake;
    @(posedge clk) (fifo.out_val && fifo.out_rdy) |-> fifo.out_val;
endproperty
as__valid_out_handshake : assert property (pr__valid_out_handshake);

// Data written is what gets read out when there's a valid handshake
property pr__write_read_data;
    @(posedge clk) (fifo.in_val && fifo.in_rdy) |=> (fifo.out_val && fifo.out_rdy) -> (fifo.in_data == fifo.buffer_data_r[fifo.buffer_tail_r]);
endproperty
as__write_read_data : assert property (pr__write_read_data);

// Buffer head and tail should not wrap around beyond INFLIGHT size
property pr__buffer_head_wraparound;
    @(posedge clk) (fifo.buffer_head_r + 1) < INFLIGHT;
endproperty
as__buffer_head_wraparound : assert property (pr__buffer_head_wraparound);

property pr__buffer_tail_wraparound;
    @(posedge clk) (fifo.buffer_tail_r + 1) < INFLIGHT;
endproperty
as__buffer_tail_wraparound : assert property (pr__buffer_tail_wraparound);

// Assert that if the buffer is full, then input ready should be low
property pr__buffer_full_input_not_ready;
    @(posedge clk) (&fifo.buffer_val_r) |-> !fifo.in_rdy;
endproperty
as__buffer_full_input_not_ready : assert property (pr__buffer_full_input_not_ready);

// Assert that if the buffer is empty, then output valid should be low
property pr__buffer_empty_output_not_valid;
    @(posedge clk) (!|fifo.buffer_val_r) |-> !fifo.out_val;
endproperty
as__buffer_empty_output_not_valid : assert property (pr__buffer_empty_output_not_valid);

// If a new data is added to the buffer, the corresponding buffer value should be high in the next cycle
property pr__data_added_buffer_val_high_next_cycle;
    @(posedge clk) (fifo.in_val && fifo.in_rdy) |=> fifo.buffer_val_r[fifo.buffer_head_r];
endproperty
as__data_added_buffer_val_high_next_cycle : assert property (pr__data_added_buffer_val_high_next_cycle);

// If data is read from the buffer, the corresponding buffer value should be low in the next cycle
property pr__data_read_buffer_val_low_next_cycle;
    @(posedge clk) (fifo.out_val && fifo.out_rdy) |=> !fifo.buffer_val_r[fifo.buffer_tail_r];
endproperty
as__data_read_buffer_val_low_next_cycle : assert property (pr__data_read_buffer_val_low_next_cycle);


endmodule