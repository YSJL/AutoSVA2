// This property file was autogenerated by AutoSVA on 2023-09-09
// to check the behavior of the original RTL module, whose interface is described below: 

module fifo_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2,
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================
localparam INFLIGHT = 2**INFLIGHT_IDX;

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));
wire out_hsk = out_val && out_rdy;
wire in_hsk = in_val && in_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign out_transid = fifo.buffer_tail_r;
assign in_transid = fifo.buffer_head_r;

//====DESIGNER-ADDED-SVA====//

// Assertion 1: When input handshake occurs, the input data is loaded into the FIFO in the next cycle.
as__input_handshake_data_load : assert property (
in_val && in_rdy |=> fifo.buffer_data_r[fifo.buffer_head_r] == in_data
);

// Assertion 2: When output handshake occurs, the output data matches the FIFO tail data in the same cycle.
as__output_handshake_data_match : assert property (
out_val && out_rdy |-> out_data == fifo.buffer_data_r[fifo.buffer_tail_r]
);

// Assertion 3: If FIFO is full, input ready should be low.
as__fifo_full_input_not_ready : assert property (
(&fifo.buffer_val_r) |-> !in_rdy
);

// Assertion 4: If FIFO is empty, output valid should be low.
as__fifo_empty_output_not_valid : assert property (
(!|fifo.buffer_val_r) |-> !out_val
);

// Assertion 5: If there's an input handshake, buffer_head_r increments in the next cycle.
as__input_handshake_head_increment : assert property (
in_val && in_rdy |=> fifo.buffer_head_r == $past(fifo.buffer_head_r) + 1'b1
);

// Assertion 6: If there's an output handshake, buffer_tail_r increments in the next cycle.
as__output_handshake_tail_increment : assert property (
out_val && out_rdy |=> fifo.buffer_tail_r == $past(fifo.buffer_tail_r) + 1'b1
);

// Assertion 7: Check if the add_buffer and clr_buffer are behaving as expected.
generate
genvar k;
for (k = 0; k < INFLIGHT; k = k + 1) begin: buffer_operations_gen
	
	// If input handshake occurs, the respective buffer slot should be flagged to be added in the next cycle.
	as__input_handshake_add_buffer_flagged : assert property (
	in_val && in_rdy && (fifo.buffer_head_r == k) |=> fifo.add_buffer[k]
	);

	// If output handshake occurs, the respective buffer slot should be flagged to be cleared in the next cycle.
	as__output_handshake_clear_buffer_flagged : assert property (
	out_val && out_rdy && (fifo.buffer_tail_r == k) |=> fifo.clr_buffer[k]
	);
	
end
endgenerate






endmodule