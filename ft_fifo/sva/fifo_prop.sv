// This property file was autogenerated by AutoSVA on 2023-09-09
// to check the behavior of the original RTL module, whose interface is described below: 

module fifo_prop
#(
		parameter ASSERT_INPUTS = 0,
		parameter INFLIGHT_IDX = 2,
		parameter SIZE = 4
)
(		// Clock + Reset
		input  wire                          clk,
		input  wire                          rst_n,
		input  wire                          in_val,
		input  wire                          in_rdy, //output
		input  wire [SIZE-1:0]               in_data,
		
		input  wire                          out_val, //output
		input  wire                          out_rdy,
		input  wire [SIZE-1:0]               out_data //output
	);

//==============================================================================
// Local Parameters
//==============================================================================
localparam INFLIGHT = 2**INFLIGHT_IDX;

genvar j;
default clocking cb @(posedge clk);
endclocking
default disable iff (!rst_n);

// Re-defined wires 
wire [INFLIGHT_IDX-1:0] in_transid;
wire [INFLIGHT_IDX-1:0] out_transid;

// Symbolics and Handshake signals
wire [INFLIGHT_IDX-1:0] symb_in_transid;
am__symb_in_transid_stable: assume property($stable(symb_in_transid));
wire out_hsk = out_val && out_rdy;
wire in_hsk = in_val && in_rdy;

//==============================================================================
// Modeling
//==============================================================================

// Modeling incoming request for fifo
if (ASSERT_INPUTS) begin
	as__fifo_fairness: assert property (out_val |-> s_eventually(out_rdy));
end else begin
	am__fifo_fairness: assume property (out_val |-> s_eventually(out_rdy));
end

// Generate sampling signals and model
reg [3:0] fifo_transid_sampled;
wire fifo_transid_set = in_hsk && in_transid == symb_in_transid;
wire fifo_transid_response = out_hsk && out_transid == symb_in_transid;

always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_sampled <= '0;
	end else if (fifo_transid_set || fifo_transid_response ) begin
		fifo_transid_sampled <= fifo_transid_sampled + fifo_transid_set - fifo_transid_response;
	end
end
co__fifo_transid_sampled: cover property (|fifo_transid_sampled);
if (ASSERT_INPUTS) begin
	as__fifo_transid_sample_no_overflow: assert property (fifo_transid_sampled != '1 || !fifo_transid_set);
end else begin
	am__fifo_transid_sample_no_overflow: assume property (fifo_transid_sampled != '1 || !fifo_transid_set);
end


// Assert that if valid eventually ready or dropped valid
as__fifo_transid_hsk_or_drop: assert property (in_val |-> s_eventually(!in_val || in_rdy));
// Assert that every request has a response and that every reponse has a request
as__fifo_transid_eventual_response: assert property (|fifo_transid_sampled |-> s_eventually(out_val && (out_transid == symb_in_transid) ));
as__fifo_transid_was_a_request: assert property (fifo_transid_response |-> fifo_transid_set || fifo_transid_sampled);


// Modeling data integrity for fifo_transid
reg [SIZE-1:0] fifo_transid_data_model;
always_ff @(posedge clk) begin
	if(!rst_n) begin
		fifo_transid_data_model <= '0;
	end else if (fifo_transid_set) begin
		fifo_transid_data_model <= in_data;
	end
end

as__fifo_transid_data_unique: assert property (|fifo_transid_sampled |-> !fifo_transid_set);
as__fifo_transid_data_integrity: assert property (|fifo_transid_sampled && fifo_transid_response |-> (out_data == fifo_transid_data_model));

assign out_transid = fifo.buffer_tail_flipflop;
assign in_transid = fifo.buffer_head_flipflop;

//====DESIGNER-ADDED-SVA====//





// SVA Property File for fifo module

// Assertion to ensure that if there is an input handshake (in_hsk), then the appropriate buffer will be added to.
as_fifo_add_buffer_on_in_hsk: assert property (
    fifo.in_hsk |-> fifo.add_buffer[fifo.buffer_head_flipflop] == 1'b1
);

// Assertion to ensure that if there is an output handshake (out_hsk), then the appropriate buffer will be cleared.
as_fifo_clear_buffer_on_out_hsk: assert property (
    fifo.out_hsk |-> fifo.clr_buffer[fifo.buffer_tail_flipflop] == 1'b1
);

// Assertion to check the correct update of buffer_head_flipflop when there is an input handshake.
as_fifo_buffer_head_flipflop_update_on_in_hsk: assert property (
    fifo.in_hsk |=> fifo.buffer_head_flipflop == $past(fifo.buffer_head_flipflop) + 1
);

// Assertion to check the correct update of buffer_tail_flipflop when there is an output handshake.
as_fifo_buffer_tail_flipflop_update_on_out_hsk: assert property (
    fifo.out_hsk |=> fifo.buffer_tail_flipflop == $past(fifo.buffer_tail_flipflop) + 1
);

// Assertion to ensure buffer value flip-flop is correctly updated when data is added.
generate
    for (genvar j = 0; j < 2**fifo.INFLIGHT_IDX; j = j + 1) begin: buffer_val_flipflop_update
        as_fifo_buffer_val_flipflop_update_on_add: assert property (
            fifo.add_buffer[j] |=> fifo.buffer_val_flipflop[j] == 1'b1
        );

        // Assertion to ensure buffer value flip-flop is correctly updated when data is cleared.
        as_fifo_buffer_val_flipflop_update_on_clr: assert property (
            fifo.clr_buffer[j] |=> fifo.buffer_val_flipflop[j] == 1'b0
        );

        // Assertion to ensure that the buffer data flip-flop is correctly updated with input data when data is added.
        as_fifo_buffer_data_flipflop_update_on_add: assert property (
            fifo.add_buffer[j] |=> fifo.buffer_data_flipflop[j] == $past(fifo.in_data)
        );
    end
endgenerate

// Assertion to check that out_data correctly references the buffer data flip-flop based on buffer_tail_flipflop.
as_fifo_out_data_correctly_references_buffer: assert property (
     fifo.out_data == fifo.buffer_data_flipflop[fifo.buffer_tail_flipflop]
);

// Assertion to check that out_val is high if any buffer is valid.
as_fifo_out_val_high_on_any_buffer_valid: assert property (
    !(|fifo.buffer_val_flipflop) |-> fifo.out_val == 1'b0
);

// Assertion to check that out_val is low if all buffers are invalid.
as_fifo_out_val_low_on_all_buffer_invalid: assert property (
    !&fifo.buffer_val_flipflop |-> fifo.out_val == 1'b1
);

// Assertion to ensure that in_rdy is low if all buffers are valid (full).
as_fifo_in_rdy_low_on_all_buffer_valid: assert property (
    &fifo.buffer_val_flipflop |-> fifo.in_rdy == 1'b0
);

// Assertion to ensure that in_rdy is high if any buffer is invalid (not full).
as_fifo_in_rdy_high_on_any_buffer_invalid: assert property (
    !(|fifo.buffer_val_flipflop) |-> fifo.in_rdy == 1'b1
);






endmodule